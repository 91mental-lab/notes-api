# Dockerfile

# Используем официальный образ Python как базовый
# Рекомендуется использовать slim-buster для уменьшения размера образа
FROM python:3.11-slim-buster

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Копируем файл зависимостей в рабочую директорию
# Этот шаг кэшируется. Если requirements.txt не меняется, зависимости не переустанавливаются.
COPY requirements.txt .

# Устанавливаем Python-зависимости
# --no-cache-dir: не сохранять кэш pip, чтобы уменьшить размер образа
# --upgrade pip: обновить pip до последней версии
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Копируем весь остальной код приложения в рабочую директорию
# Важно: .env не должен копироваться в образ для продакшена!
# Мы будем передавать его через Docker Compose или переменные окружения.
COPY . .

# Открываем порт 8000, который будет использовать Uvicorn
EXPOSE 8000

# Команда для запуска Uvicorn при старте контейнера
# --host 0.0.0.0: Uvicorn слушает все доступные IP-адреса, а не только localhost.
# Это важно для доступа извне контейнера.
# --port 8000: Указываем порт.
# main:app: Указываем, что нужно запустить объект 'app' из файла 'main.py'.
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]